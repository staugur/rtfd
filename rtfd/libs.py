# -*- coding: utf-8 -*-
"""
    libs
    ~~~~

    核心库

    :copyright: (c) 2019 by staugur.
    :license: BSD 3-Clause, see LICENSE for more details.
"""

from os import mkdir, remove
from shutil import rmtree
from os.path import expanduser, dirname, join, abspath, isdir, isfile
from jinja2 import Template
from time import strftime
from .utils import ProjectStorage, run_cmd, run_cmd_stream
from .exceptions import ProjectExistsError, ProjectNotFound
from .config import CfgHandler
from ._log import Logger


class ProjectManager(object):

    def __init__(self, cfg=None):
        self._cfg_file = cfg or expanduser("~/.rtfd.cfg")
        self._cfg_handler = CfgHandler(self._cfg_file)
        self._cps = ProjectStorage(self._cfg_file)
        self._logger = Logger("sys", self._cfg_file).getLogger

    def create(self, name, url, **kwargs):
        name = name.lower()
        if self.has(name):
            raise ProjectExistsError("This project '%s' already exists" % name)
        else:
            kwargs["url"] = url
            self._logger.info(
                "Project.Create: name is %s, create params is %s" % (name, kwargs))
            return self._cps.set(name, kwargs)

    def has(self, name):
        name = name.lower()
        if self._cps.get(name):
            return True
        else:
            return False

    def get(self, name, default=None):
        name = name.lower()
        if self.has(name):
            return self._cps.get(name, default=default)
        return default

    def update(self, name, **kwargs):
        name = name.lower()
        if self.has(name):
            data = self.get(name)
            if isinstance(data, dict):
                data.update(kwargs)
                self._logger.info(
                    "Project.Update: name is %s, update params is %s" % (name, kwargs))
                return self._cps.set(name, data)

    def remove(self, name):
        name = name.lower()
        if self.has(name):
            self._logger.info(
                "Project.Remove: name is %s, will remove docs and nginx itself" % name)
            #: 删除文档和nginx
            PROJECT_DOCS = join(self._cfg_handler.g.base_dir, "docs", name)
            NGINX_FILE = join(self._cfg_handler.g.base_dir,
                              "nginx", "%s.conf" % name)
            if isdir(PROJECT_DOCS):
                rmtree(PROJECT_DOCS)
            if isfile(NGINX_FILE):
                remove(NGINX_FILE)
                self.__reload_nginx()
            return self._cps.set(name, '')

    def __reload_nginx(self):
        #: reload nginx
        nginx_exec = self._cfg_handler.g.get("nginx_exec")
        if nginx_exec:
            exitcode, _, _ = run_cmd(nginx_exec, '-t')
            if exitcode == 0:
                run_cmd(nginx_exec, '-s', 'reload')

    def nginx_builder(self, name):
        name = name.lower()
        data = self.get(name)
        if not data or not isinstance(data, dict):
            raise ProjectNotFound("Did not find this project '%s'" % name)
        DOCS_DIR = join(self._cfg_handler.g.base_dir, "docs")
        NGINX_DIR = join(self._cfg_handler.g.base_dir, "nginx")
        NGINX_DN = self._cfg_handler.g.nginx_dn
        if not isdir(DOCS_DIR):
            mkdir(DOCS_DIR)
        if not isdir(NGINX_DIR):
            mkdir(NGINX_DIR)
        #: 通用模板
        multi_lang_tpl = '''#: Automatic generated by rtfd in {{ t }}
server {
    listen 80;
    server_name {{ name }}.{{ nginx_dn }};
    charset utf-8;
    root {{ docs_dir }}/{{ name }}/;
    index index.html;
    location = / {
        return 301 /en/latest/$is_args$args;
    }
    {% for lang in languages.split(",") %}
    location /{{ lang }}/latest/ {
        alias {{ docs_dir }}/{{ name }}/{{ lang }}/latest/;
    }
    {% endfor %}
}'''
        #: 单一版本的模板
        single_lang_tpl = '''#: Automatic generated by rtfd in {{ t }}
server {
    listen 80;
    server_name {{ name }}.{{ nginx_dn }};
    charset utf-8;
    root {{ docs_dir }}/{{ name }}/{{ languages }}/latest/;
    index index.html;
}'''
        languages = data.get("languages") or "en"
        is_signle = True if data.get("single") in (
            True, "true", "True") else False
        tpl = Template(single_lang_tpl) if is_signle else Template(
            multi_lang_tpl)
        rendered_nginx_conf = tpl.render(t=strftime('%Y-%m-%d %H:%M:%S'), name=name, nginx_dn=NGINX_DN, docs_dir=join(
            DOCS_DIR, name), languages=languages)
        self._logger.info(
            "Project.Nginx: name is %s, will render nginx configure" % name)
        with open(join(NGINX_DIR, "%s.conf" % name), "w") as fp:
            fp.write(rendered_nginx_conf)
        #: reload nginx
        self._logger.info(
            "Project.Nginx: name is %s, will reload nginx" % name)
        self.__reload_nginx()


class RTFD_BUILDER(object):

    def __init__(self, cfg=None):
        self._cfg_file = cfg or expanduser("~/.rtfd.cfg")
        self._cpm = ProjectManager(self._cfg_file)
        self._build_sh = join(dirname(abspath(__file__)), "scripts/builder.sh")
        self._logger = Logger("sys", self._cfg_file).getLogger

    def build(self, name, branch="master", stream=True):
        name = name
        branch = branch
        if not self._cpm.has(name):
            raise ProjectNotFound("Did not find this project '%s'" % name)
        data = self._cpm.get(name)
        if data and isinstance(data, dict) and "url" in data:
            self._logger.debug(
                "RTFD.Builder: build %s with branch %s" % (name, branch))
            url = data["url"]
            cmd = ['bash', self._build_sh, '-n', name, '-u', url, '-b', branch,
                   '-c', self._cfg_file]
            if stream is True:
                for i in run_cmd_stream(*cmd):
                    print(i)
            else:
                code, out, err = run_cmd(*cmd)
                if code == 0:
                    return True
        else:
            raise ValueError("Not found name, data error for %s" % name)
